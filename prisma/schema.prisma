// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid()) @db.Uuid
  name String? 
  username String? @unique
  email String? @unique
  hashedPassword String?
  bio String?
  emailVerified DateTime?
  image String?
  coverImage String?
  profileImage String?
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt
  followIds String[] @db.Uuid
  hasNotification Boolean?

  post Post[]
  comments Comment[]
  notifications Notification[]
} 


model Post{
  id String @id @default(uuid()) @db.Uuid
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @db.Uuid
  likedId String[] @db.Uuid
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
} 

model Comment{
  id String @id @default(uuid()) @db.Uuid
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @db.Uuid
  postId String @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

}

model Notification{
  id String @id @default(uuid()) @db.Uuid
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @db.Uuid 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
